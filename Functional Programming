---
title: "Functional Programming HW"
author: "Kesicia Dickinson, Elizabeth Brannon, Shane Weary"
date: "2/21/2018"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
install.packages('pryr')

```
## Exercises 1
# 1. Given a function, like "mean", match.fun() lets you find a function. Given a function, can you find its name? Why doesn’t that make sense in R?
- Within R, functions are objects which are not automatically bound to a name. Since there is no syntax specifically for creating a named function you have to use a regular assignment operator to give the function a name when you create it. If you choose not to give a name then you will have an anonymous functions.

# 2. Use lapply() and an anonymous function to find the coefficient of variation (the standard deviation divided by the mean) for all columns in the mtcars dataset.
```{r}
mtcars
lapply( mtcars, FUN=function(x) sd(x) / mean(x) )
```

# 3. Use integrate() and an anonymous function to find the area under the curve for the following functions. Use Wolfram Alpha to check your answers.
# y = x ^ 2 - x, x in [0, 10]
```{r}
integrate( f=function(x) x^2-x, lower=0, upper=10 )
```
# y = sin(x) + cos(x), x in [-π, π]
```{r}
integrate( f=function(x) sin(x) + cos(x), -pi, pi )
```
# y = exp(x) / x, x in [10, 20]
```{r}
integrate( f=function(x) exp(x)/x, lower=10, upper=20 )
```

# 4. A good rule of thumb is that an anonymous function should fit on one line and shouldn’t need to use {}. Review your code. Where could you have used an anonymous function instead of a named function? Where should you have used a named function instead of an anonymous function?
-


## Exercises 2
# 1. Why are functions created by other functions called closures?
- Functions created by other functions are called closures because they enclose the environment of the parent environment and they can access all of the parent's variables.

# 2. What does the following statistical function do? What would be a better name for it? (The existing name is a bit of a hint.)
```{r}
bc <- function(lambda) {
  if (lambda == 0) {
    function(x) log(x)
  } else {
    function(x) (x ^ lambda - 1) / lambda
  }
}
```
- The proceeding function creates two functions depending on the value of lambda. More clearly, if lambda is 0 the it creates a function which calculates the log of x (log x). If lambda is not 0, it creates a function that calculates x raised to the power of lambda minus 1 divided by lambda (x^lambda-1/lambda).

# 3. What does approxfun() do? What does it return?
- approxfun() is an interpolation function which creates a function that interpolates or interject between data points given in the factor. It returns a function.

# 4. What does ecdf() do? What does it return?
- ecdf() calculates the value of empirical cumulative distribution function of the data points given to the factory. It returns the percentiles for x.

# 5. Create a function that creates functions that compute the ith central moment of a numeric vector. You can test it by running the following code:
```{r}
moment <- function(n) {
    function(x) mean((x - mean(x))^n)
}

m1 <- moment(1)
m2 <- moment(2)

x <- runif(100)
stopifnot(all.equal(m1(x), 0))
stopifnot(all.equal(m2(x), var(x) * 99 / 100))
```

# 6. Create a function pick() that takes an index, i, as an argument and returns a function with an argument x that subsets x with i.
```{r}
pick <- function(i){ # here, the function is taking i
  function(x){  # setting up the function to be returned
    x[[i]]  
  }
}

lapply(mtcars, pick(5))
# should do the same as this
lapply(mtcars, function(x) x[[5]])
```



## Exercises 3
# 1. Implement a summary function that works like base::summary(), but uses a list of functions. Modify the function so it returns a closure, making it possible to use it as a function factory.
```{r}
summary(x)

# Here, I make the list of functions
summary1 <- list(
  mymin = function(x) min(x),
  my1stqu = function(x) quantile(x,0.25),
  mymedian = function(x) median(x),
  mymean = function(x) mean(x),
  my3rdqu = function(x) quantile(x,0.75),
  mymax = function(x) max(x)
  )

lapply(summary1,function(f) f(x))

# using the list of functions above for the factory function
summary2 <- function(){
  list(
    mymin = function(x) min(x),
  my1stqu = function(x) quantile(x,0.25),
  mymedian = function(x) median(x),
  mymean = function(x) mean(x),
  my3rdqu = function(x) quantile(x,0.75),
  mymax = function(x) max(x)
  ) 
}

# here's the closure
m <- summary2()
m[[2]](1:10)
```

# 2. Which of the following commands is equivalent to with(x, f(z))?
# a.  x$f(x$z).
# b.  f(x$z).
# c.  x$f(z).
# d.  f(z).
# e.  It depends.
- (E) It depends. Assuming z is in x, it's (b): f(x$z). If f is also part of x, then it's (a): x$f(x$z). But if neither is in x, then it's (d): f(z).

## Exercises 4
# 1. Instead of creating individual functions (e.g., midpoint(), trapezoid(), simpson(), etc.), we could store them in a list. If we did that, how would that change the code? Can you create the list of functions from a list of coefficients for the Newton-Cotes formulae?

# 2. The trade-off between integration rules is that more complex rules are slower to compute, but need fewer pieces. For sin() in the range [0, π], determine the number of pieces needed so that each rule will be equally accurate. Illustrate your results with a graph. How do they change for different functions? sin(1 / x^2) is particularly challenging.
